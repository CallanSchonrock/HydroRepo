# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QMydro
                                 A QGIS plugin
 This plugin aids catchment delineation
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-08-07
        git sha              : https://github.com/CallanSchonrock/Mydro
        copyright            : (C) 2024 by Callan Schonrock
        email                : callansch@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .QMydro_dockwidget import QMydroDockWidget
import os.path

# Code Specific Imports
import time
import sys
import os
from qgis.core import *
from PyQt5.QtWidgets import QAction, QFileDialog
from PyQt5.QtCore import QThread, pyqtSignal, QVariant
from qgis.PyQt.QtWidgets import QAction, QComboBox
from qgis.PyQt.QtGui import QIcon, QColor
# import struct
import subprocess
# import socket
# import processing
import math
import shutil
import csv
# import pandas as pd
# import matplotlib.pyplot as plt

from .scripts import convertToRORB
from .scripts import convertToWBNM


def classFactory(iface):
    # Empty classFactory method. Had an issue with QGIS instance not recognizing __init__.py classFactory
    pass


class QMydro():
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QMydro_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&QMydro')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'QMydro')
        self.toolbar.setObjectName(u'QMydro')

        #print "** INITIALIZING PyCatch"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QMydro', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = f'{self.plugin_dir}/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING PyCatch"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD PyCatch"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&QMydro'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------
    def initializeVars(self):
        """Reset Instance Stored Variables"""
        self.cellsize_x_in_crs_units = 0
        self.cellsize_y_in_crs_units = 0
        self.carveLayer = None
        self.outletsLayer = None
        self.autoBreakup = False
        self.targetSubcatSize = 0
    
    def defineOutputPath(self, path):
        self.outputPath = path
    
    def toggleBreakup(self, state):
        if state == 2:
            self.autoBreakup = True
            self.dockwidget.targetSizeLabel.setEnabled(True)
            self.dockwidget.targetSubcatSize.setEnabled(True)
        else:
            self.autoBreakup = False
            self.dockwidget.targetSizeLabel.setEnabled(False)
            self.dockwidget.targetSubcatSize.setEnabled(False)
    
    
    def toggleGisSubdir(self, state):
        if state == 2:
            self.dockwidget.gisSubdir.setEnabled(True)
            
            self.outputPath = os.path.join(self.dockwidget.outputDir.filePath(), self.dockwidget.gisSubdir.text())
            
        else:
            self.dockwidget.gisSubdir.setEnabled(False)
            self.outputPath = self.dockwidget.outputDir.filePath()
    
    
    def UpdateRecrunchRequirements(self, text):
        if text == "Mydro":
            self.dockwidget.RecrunchSubcatsLabel.setText("Subcats: ID, Area, HS, HL, B, m, I, DS")
            self.dockwidget.RecrunchStreamsLabel.setEnabled(True)
            self.dockwidget.RecrunchStreamsLabel.setText("Streams: ID, Length, Slope")
        elif text == "URBS":
            self.dockwidget.RecrunchSubcatsLabel.setText("Subcats: ID, Area, CS, I, DS - Optional (U, UF)")
            self.dockwidget.RecrunchStreamsLabel.setEnabled(True)
            self.dockwidget.RecrunchStreamsLabel.setText("Streams: ID, Length, Slope")
        elif text == "RORB":
            self.dockwidget.RecrunchSubcatsLabel.setText("Subcats: ID, Area, I, DS")
            self.dockwidget.RecrunchStreamsLabel.setEnabled(True)
            self.dockwidget.RecrunchStreamsLabel.setText("Streams: ID, Length")
            
        elif text == "WBNM":
            self.dockwidget.RecrunchSubcatsLabel.setText("Subcats: ID, Area, I, DS")
            self.dockwidget.RecrunchStreamsLabel.setEnabled(True)
            self.dockwidget.RecrunchStreamsLabel.setText("Streams: NONE")
            self.dockwidget.RecrunchStreamsLabel.setEnabled(False)
    
    
    def get_all_upstream(self, subby, upstream):
        if subby not in upstream:
            return []
        subs = upstream[subby][:]
        for s in upstream[subby]:
            subs.extend(self.get_all_upstream(s, upstream))
        return subs
    
    
    def runRecrunch(self):
        
        RecrunchSub = self.dockwidget.RecrunchSub.currentLayer()
        text = self.dockwidget.RecrunchModelType.currentText()
        features = sorted(RecrunchSub.getFeatures(), key=lambda f: f["ID"])
        RecrunchStreams = None
        try:
            RecrunchStreams = self.dockwidget.RecrunchStreams.currentLayer()
        except:
            RecrunchStreams = None
        outputDir = self.dockwidget.ReCrunchOutputDir.filePath()
        rootedSubbies = {}
        dsSubbies = {}
        immediatelyUsSubbies = {}
        upstream_counts = {}
        upstream = {}
        originalUpstream = {}
        for feature in features:
            upstream[str(feature["ID"])] = []
            originalUpstream[str(feature["ID"])] = []
            upstream_counts[str(feature["ID"])] = 0
            dsSubbies[str(feature["ID"])] = str(feature["DS"])
            rootedSubbies[str(feature["ID"])] = False
            
        for subby, downstream in dsSubbies.items():
            if downstream == '0' or downstream == '-1':
                continue
            upstream[downstream].append(str(subby))
            originalUpstream[downstream].append(str(subby))
        
        usSubbies = {}
        for subby in set(dsSubbies.values()):
            usSubbies[subby] = self.get_all_upstream(subby, upstream)
        
        for subby in set(dsSubbies.values()):
            upstream_counts[subby] = len(self.get_all_upstream(subby, upstream))
        
        if text == "Mydro":
            subbyLengths = {}
            subbySlopes = {}
            RecrunchStreams = self.dockwidget.RecrunchStreams.currentLayer()
            for feature in RecrunchStreams.getFeatures():
                subbyLengths[str(feature["ID"])] = feature["Length"]
                subbySlopes[str(feature["ID"])] = feature["Slope"]
            
            with open(os.path.join(outputDir, "_RoutingFile.vec"), 'w') as f:
                f.write("! MODELNAME\n")
                upstreamCatch = True
                outlets = 0
                indentCount = 0
                error = False
                while upstreamCatch:
                    queue = []
                    upstreamCatch = False
                    maxSubbiesUs = -99999
                    for sub, root_con in rootedSubbies.items():
                        if root_con == True:
                            continue
                        if upstream_counts[str(sub)] > maxSubbiesUs:
                            queue = [str(sub)]
                            maxSubbiesUs = upstream_counts[str(sub)]
                    while len(queue) > 0:
                        sub = queue[0]
                        if len(upstream[sub]) > 0:
                            maxSubbiesUs = -99999
                            maxSubby = None
                            for usSubby in upstream[sub]:
                                if len(upstream[usSubby]) >= maxSubbiesUs:
                                    maxSubby = usSubby
                                    maxSubbiesUs = len(upstream[usSubby])
                            queue.append(maxSubby)
                            queue.pop(0)
                            continue
                        
                        indentation = ""
                        indentation += "\t" * indentCount
                        rootedSubbies[queue[0]] = True
                        extension = f" L = {round(subbyLengths[sub] / 2, 5)} Sc = {round(max(subbySlopes[sub], 0.0005), 5)} \n"
                        f.write(f"{indentation}#{sub} REACH" + extension)

                        
                        if (dsSubbies[sub] != '-1' and dsSubbies[sub] != '0'):
                            queue.append(dsSubbies[sub])
                            try:
                                upstream[dsSubbies[sub]].remove(sub)
                            except:
                                self.iface.messageBar().pushMessage("Warning", "ERROR DETERMINING UPSTREAM / DOWNSTREAM SUBCATCHMENTS CHECK VECTOR FILE", level=Qgis.Warning)
                                queue = []
                                upstreamCatch = False
                                error = True
                                break
                            
                        queue.pop(0)
                        if len(queue) > 0:
                            if len(upstream[queue[0]]) > 0:
                                f.write(f"{indentation}{'{'}\n")
                                indentCount += 1
                            else:
                                for _ in range(1, len(originalUpstream[queue[0]])):
                                    indentCount -= 1
                                    indentation = ""
                                    indentation += "\t" * indentCount
                                    f.write(f"{indentation}{'}'}\n")
                    if error:
                        break
                    for sub, root_con in rootedSubbies.items():
                        if root_con == False:
                            f.write("{\n")
                            outlets += 1
                            upstreamCatch = True
                            break
                            
                for _ in range(outlets):
                    f.write("}\n")
                
        elif text == "URBS" or text == "RORB" or text == "WBNM":
            with open(os.path.join(outputDir, "_SubcatFile.csv"), 'w') as f:
                f.write("Index,Area,U,UF,CS,I\n")
                for feature in features:
                    f.write("Index,Area,U,UF,CS,I\n")
                    fracU = 0
                    fracUF = 0
                    try:
                        fracU = feature['U']
                    except:
                        fracU = 0
                    try:
                        fracUF = feature['UF']
                    except:
                        fracUF = 0
                    f.write(f"{feature['ID']},{feature['Area']},{fracU},{fracUF},{feature['CS']},{feature['I']}")
            
            subbyLengths = {}
            subbySlopes = {}
            if text == 'WBNM':
                for feature in features:
                    subbyLengths[str(feature["ID"])] = -2
                    subbySlopes[str(feature["ID"])] = -1
            else:
                RecrunchStreams = self.dockwidget.RecrunchStreams.currentLayer()
                for feature in RecrunchStreams.getFeatures():
                    subbyLengths[str(feature["ID"])] = feature["Length"]
                    subbySlopes[str(feature["ID"])] = feature["Slope"]
            
            with open(os.path.join(outputDir, "_RoutingFile.vec"), 'w') as f:
                f.write("MODELNAME\n")
                f.write("Model: SPLIT\n")
                f.write("USES: L , CS , Sc , U , I \n")
                f.write("DEFAULT PARAMETERS: alpha = 0.005 m = 0.8 beta = 2.5 n = 1 x = 0 IL = 0 CL = 0.0\n")
                f.write("CATCHMENT DATA FILE = _SubcatFile.csv\n")
                upstreamCatch = True
                outlets = 0
                indentCount = 0
                error = False
                while upstreamCatch:
                    queue = []
                    upstreamCatch = False
                    maxSubbiesUs = -99999
                    for sub, root_con in rootedSubbies.items():
                        if root_con == True:
                            continue
                        if upstream_counts[str(sub)] > maxSubbiesUs:
                            queue = [str(sub)]
                            maxSubbiesUs = upstream_counts[str(sub)]
                    while len(queue) > 0:
                        sub = queue[0]
                        if len(upstream[sub]) > 0:
                            maxSubbiesUs = -99999
                            maxSubby = None
                            for usSubby in upstream[sub]:
                                if len(upstream[usSubby]) >= maxSubbiesUs:
                                    maxSubby = usSubby
                                    maxSubbiesUs = len(upstream[usSubby])
                            queue.append(maxSubby)
                            queue.pop(0)
                            continue
                        
                        indentation = ""
                        indentation += "\t" * indentCount
                        rootedSubbies[queue[0]] = True
                        extension = f" L = {round(subbyLengths[sub] / 2, 5)} Sc = {round(max(subbySlopes[sub], 0.0005), 5)} \n"
                        if upstream_counts[sub] == 0:
                            f.write(f"{indentation}RAIN #{sub}" + extension)
                        else:
                            f.write(f"{indentation}ADD RAIN #{sub}" + extension)
                        
                        if (dsSubbies[sub] != '-1' and dsSubbies[sub] != '0'):
                            queue.append(dsSubbies[sub])
                            try:
                                upstream[dsSubbies[sub]].remove(sub)
                            except:
                                self.iface.messageBar().pushMessage("Warning", "ERROR DETERMINING UPSTREAM / DOWNSTREAM SUBCATCHMENTS CHECK VECTOR FILE", level=Qgis.Warning)
                                queue = []
                                upstreamCatch = False
                                error = True
                                break
                            
                        queue.pop(0)
                        if len(queue) > 0:
                            if len(upstream[queue[0]]) > 0:
                                f.write(f"{indentation}STORE.\n")
                                indentCount += 1
                            else:
                                for _ in range(1, len(originalUpstream[queue[0]])):
                                    indentCount -= 1
                                    indentation = ""
                                    indentation += "\t" * indentCount
                                    f.write(f"{indentation}GET.\n")
                                extension = f" L = {round(subbyLengths[queue[0]] / 2, 5)} Sc = {round(max(subbySlopes[queue[0]], 0.0005), 5)} \n"
                                f.write(f"{indentation}ROUTE THRU #{queue[0]}" + extension)
                    if error:
                        break
                    for sub, root_con in rootedSubbies.items():
                        if root_con == False:
                            f.write("STORE.\n")
                            outlets += 1
                            upstreamCatch = True
                            break
                            
                for _ in range(outlets):
                    f.write("GET.\n")
                
                f.write("END OF CATCHMENT DATA.\n")
                
        if text == "RORB":
            convertToRORB.convert_to_RORB(os.path.join(outputDir,"_RORB.catg"),
                RecrunchSub.source(),
                os.path.join(outputDir,"_RoutingFile.vec"))
            
        elif text == "WBNM":
            convertToWBNM.convert_to_WBNM(os.path.join(outputDir,"_WBNM.wbn"),
                RecrunchSub.source(),
                os.path.join(outputDir,"_RoutingFile.vec"))

            
    def transferData(self):
        
        
        if self.carveLayer != None:
            carve_path = str(self.carveLayer.source())
        else:
            carve_path = 0
        
        targetSize = 0
        if self.dockwidget.toggleBreakup.isChecked(): # If auto breakup is toggled
            targetSize = float(self.dockwidget.targetSubcatSize.text())
        else:
            targetSize = 0
        
        
        
        template_batch_file = os.path.join(self.plugin_dir, "scripts//CS//templateRunCatch.bat")
        with open(template_batch_file, 'r') as file:
            template_content = file.read()
        
        if "uid=" in self.elevationRaster.source():
            self.iface.messageBar().pushMessage("Warning", "Detected Scratch/Memory Layers, Script may not execute as intended", level=Qgis.Warning)
        if "uid=" in str(carve_path):
            self.iface.messageBar().pushMessage("Warning", "Detected Scratch/Memory Layers, Script may not execute as intended", level=Qgis.Warning)
        if "uid=" in self.outletsLayer.source():
            self.iface.messageBar().pushMessage("Warning", "Detected Scratch/Memory Layers, Script may not execute as intended", level=Qgis.Warning)
        
        if not (self.elevationRaster.crs() == self.outletsLayer.crs()):
            self.iface.messageBar().pushMessage("Warning", "CRS Mismatch Between Layers, Script may not execute as intended", level=Qgis.Warning)
        elif str(carve_path) != "0":
            if not (self.elevationRaster.crs() == self.carveLayer.crs()):
                self.iface.messageBar().pushMessage("Warning", "CRS Mismatch Between Layers, Script may not execute as intended", level=Qgis.Warning)
        
        model = self.dockwidget.modelType.currentText()
        if model == "RORB" or model == "WBNM":
            model = "URBS"
        
        batch_content = template_content.replace('%1', str(self.elevationRaster.source()).split('|')[0])
        batch_content = batch_content.replace('%2', str(carve_path).split('|')[0])
        batch_content = batch_content.replace('%3', str(self.outletsLayer.source()).split('|')[0])
        batch_content = batch_content.replace('%4', str(self.outputPath).split('|')[0])
        batch_content = batch_content.replace('%5', str(targetSize))
        batch_content = batch_content.replace('%6', model)
        batch_content = batch_content.replace('%7', os.path.join(self.plugin_dir, "scripts//CS//delineateCatch.exe"))
                                        
        # Save the modified batch content to a new batch file
        generated_batch_file = os.path.join(self.outputPath, 'runQMydro.bat')
        
        with open(generated_batch_file, 'w') as file:
            file.write(batch_content)
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags &= ~subprocess.STARTF_USESHOWWINDOW  # Prevent the window from being minimized
        subprocess_proc = subprocess.Popen(generated_batch_file, cwd=os.path.join(self.plugin_dir, "scripts//CS"), startupinfo=startupinfo)
        time.sleep(1)
        subprocess_proc.wait()
        return
        
    def write_rast_from_numpy(self, path, nameOfData, addToProject):

        if addToProject:
            if len(nameOfData) > 0:
                try:
                    QgsProject.instance().mapLayersByName(nameOfData)[0]
                except:
                    self.layer = QgsRasterLayer(path,nameOfData)
                    if nameOfData == "QMydro_Accumulation":
                        self.layer.loadNamedStyle(os.path.join(self.plugin_dir, "accumStyle.qml"))
                    QgsProject.instance().addMapLayer(self.layer)
                else:
                    self.layer = QgsProject.instance().mapLayersByName(nameOfData)[0]
                    self.layer.dataProvider().reloadData()
                    self.layer.triggerRepaint()
                self.layer = None
                
    
    def convertToPolygon(self, path, nameOfData):
        # alg_params = {
            # 'BAND': 1,
            # 'EIGHT_CONNECTEDNESS': True,
            # 'EXTRA': '',
            # 'FIELD': 'ID',
            # 'INPUT': os.path.join(self.outputPath, "QMydro_SubCats.tif"),
            # 'OUTPUT': path
        # }
        # processing.run('gdal:polygonize', alg_params)
        self.catchLayer = QgsVectorLayer(path,nameOfData)
        # layer_units = self.catchLayer.crs().mapUnits()
        # conversionFac = (QgsUnitTypes.fromUnitToUnitFactor(layer_units, QgsUnitTypes.DistanceMeters)**2) / 1000000
        # Update the attribute table for each feature
        # with edit(self.catchLayer):
            # field = QgsField("Area", QVariant.Double)
            # self.catchLayer.addAttribute(field)
            # field = QgsField("US_Area", QVariant.Double)
            # self.catchLayer.addAttribute(field)
            # field = QgsField("Tc", QVariant.Double)
            # self.catchLayer.addAttribute(field)
            
            # for feature in self.catchLayer.getFeatures():
                
                # feature["Area"] = round(feature.geometry().area() * conversionFac,5)
                # Set the default value for the new column
                # feature["US_Area"] = self.subcatUSAreas[int(feature["ID"]) - 1]
                # feature["Tc"] = self.subcatTc[int(feature["ID"]) - 1]
                # self.catchLayer.updateFeature(feature)
                
        # Commit the changes
        # self.catchLayer.commitChanges()
        self.catchLayer.loadNamedStyle(os.path.join(self.plugin_dir, "catchStyling.qml"))
        QgsProject.instance().addMapLayer(self.catchLayer)
        
    def convertToLines(self, path, nameOfData):
        """"Convert Streams raster data to shapefile using Grass Tools (GDAL might have a faster alternative)"""
        self.streamsLayer = QgsVectorLayer(path,nameOfData)
        self.streamsLayer.loadNamedStyle(os.path.join(self.plugin_dir, "streamsStyle.qml"))
        QgsProject.instance().addMapLayer(self.streamsLayer)        
    
    def writeNodalLinks(self, nameOfData):
        centroids = {}
        for feature in self.catchLayer.getFeatures():
            geom = feature.geometry()
            centroids[str(feature["ID"])] = geom.centroid()
        epsgCode = self.catchLayer.crs().authid().split(":")[1]
        line_layer = QgsVectorLayer(f"LineString?epsg:{epsgCode}", "my_line_layer", "memory")
        # line_layer = QgsVectorLayer(f"LineString", "my_line_layer", "memory")
        with edit(line_layer):
            
            with open(os.path.join(self.outputPath, "_RoutingFile.vec"), 'r') as csvfile:
                reader = csv.reader(csvfile, delimiter=' ')
                usSubbies = []
                for rows in reader:
                    data = []
                    for field in rows:
                        split_data = [item for item in field.split('\t')]
                        data.extend(split_data)
                    if "RAIN" in data:
                        for text in data:
                            if '#' in text:
                                usSubbies.insert(0,text[1:])
                    if "GET." in data:
                        usSubbies = usSubbies[:-1] + usSubbies[-1]
                    if "STORE." in data:
                        usSubbies = [usSubbies]
                    if "ROUTE" in data:
                        for text in data:
                            if '#' in text:
                                dsSubbyCentroid = centroids[text[1:]]
                                for usSubby in [item for item in usSubbies if isinstance(item, str)]:
                                    usSubbyCentroid = centroids[usSubby]
                                    # Create a new feature
                                    line_feature = QgsFeature()
                                    line_geometry = QgsGeometry.fromPolyline([QgsPoint(usSubbyCentroid.asPoint()), QgsPoint(dsSubbyCentroid.asPoint())])
                                    line_feature.setGeometry(line_geometry)
                                    line_layer.dataProvider().addFeatures([line_feature])
                        usSubbies = [item for item in usSubbies if not isinstance(item, str)]
        
        line_layer.commitChanges()
        line_layer.updateExtents()
        line_layer.setCrs(self.catchLayer.crs())
        options = QgsVectorFileWriter.SaveVectorOptions()
        options.driverName = "ESRI Shapefile"
        # Write the line layer to the specified file
        QgsVectorFileWriter.writeAsVectorFormatV3(
            line_layer,
            os.path.join(self.outputPath, "QMydro_NodalLinks.shp"),
            QgsProject.instance().transformContext(),
            options
        )
        
        # Load the saved line layer back into QGIS (optional)
        saved_line_layer = QgsVectorLayer(os.path.join(self.outputPath, "QMydro_NodalLinks.shp"), nameOfData, "ogr")
        saved_line_layer.loadNamedStyle(os.path.join(self.plugin_dir, "nodalStyle.qml"))
        QgsProject.instance().addMapLayer(saved_line_layer)
    
    def processAlgs(self):
        """Main delineation method"""
        if self.dockwidget.toggleGisSubdir.isChecked():
            self.outputPath = os.path.join(self.dockwidget.outputDir.filePath(), self.dockwidget.gisSubdir.text())
            if os.path.exists(self.dockwidget.outputDir.filePath()):
                if not os.path.exists(self.outputPath):
                    os.makedirs(self.outputPath)
        else:
            self.outputPath = self.dockwidget.outputDir.filePath()
        # Reset existing instance properties
        self.catchData = None
        self.catchLayer = None
        self.layer = None
        self.carveLayer = self.dockwidget.inputCarveFile.currentLayer()
        self.outletsLayer = self.dockwidget.inputOutletsFile.currentLayer()
        self.elevationRaster = self.dockwidget.inputElevationFile.currentLayer()

        # Remove existing files in output directory
        filesToRemove = []
        for files in os.listdir(self.outputPath):
            if "QMydro_Streams." in files:
                filesToRemove.extend([files])
            elif "QMydro_SubCats." in files:
                filesToRemove.extend([files])
            elif "QMydro_NodalLinks." in files:
                filesToRemove.extend([files])
        
        for files in filesToRemove:
            os.remove(os.path.join(self.outputPath, files))

        if os.path.exists(os.path.join(self.outputPath, "QMydro_Accumulation.tif")):
            os.remove(os.path.join(self.outputPath, "QMydro_Accumulation.tif"))
        
        if os.path.exists(os.path.join(self.outputPath, "QMydro_Accumulation.tif.aux.xml")):
            os.remove(os.path.join(self.outputPath, "QMydro_Accumulation.tif.aux.xml"))
        
        if os.path.exists(os.path.join(self.outputPath, "QMydro_SubCats.tif")):
            os.remove(os.path.join(self.outputPath, "QMydro_SubCats.tif"))
        
        if os.path.exists(os.path.join(self.outputPath, "QMydro_SubCats.tif.aux.xml")):
            os.remove(os.path.join(self.outputPath, "QMydro_SubCats.tif.aux.xml"))
            
        time.sleep(0.1) # Wait before large file transfer
        self.transferData() # Transfer and process externally
        
        
        # Output Files
        self.write_rast_from_numpy(os.path.join(self.outputPath, "QMydro_SubCats.tif"), "", False)
        self.write_rast_from_numpy(os.path.join(self.outputPath, "QMydro_Accumulation.tif"), "QMydro_Accumulation", True)
        
        # Python Processing
        self.layer = None
        self.convertToLines(os.path.join(self.outputPath, "QMydro_Streams.shp"), "QMydro_Streams")
        self.convertToPolygon(os.path.join(self.outputPath, "QMydro_SubCats.shp"), "QMydro_SubCats")
        
        self.writeNodalLinks("QMydro_NodalLinks")
        
        if self.dockwidget.modelType.currentText() == "RORB":
            convertToRORB.convert_to_RORB(os.path.join(self.outputPath,"_RORB.catg"),
                os.path.join(self.outputPath,"QMydro_SubCats.shp"),
                os.path.join(self.outputPath,"_RoutingFile.vec"))
        
        if self.dockwidget.modelType.currentText() == "WBNM":
            convertToWBNM.convert_to_WBNM(os.path.join(self.outputPath,"_WBNM.wbn"),
                os.path.join(self.outputPath,"QMydro_SubCats.shp"),
                os.path.join(self.outputPath,"_RoutingFile.vec"))
        
        # if len(self.dockwidget.rainfallOutputDir.filePath()) <= 0:
            # self.dockwidget.rainfallOutputDir.setFilePath(self.dockwidget.outputDir.filePath())
            
        if os.path.exists(os.path.join(self.outputPath, "QMydro_SubCats.tif")):
            os.remove(os.path.join(self.outputPath, "QMydro_SubCats.tif"))
            
        if os.path.exists(os.path.join(self.outputPath, "QMydro_SubCats.tif.aux.xml")):
            os.remove(os.path.join(self.outputPath, "QMydro_SubCats.tif.aux.xml"))
    
    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            
            self.pluginIsActive = True

            #print "** STARTING PyCatch"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = QMydroDockWidget()
            
            self.initializeVars()
            
            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
            
            # Catchment Breakup
            
            self.dockwidget.inputElevationFile.setFilters(QgsMapLayerProxyModel.RasterLayer)
            self.dockwidget.inputElevationFile.setCurrentIndex(-1)
            
            self.dockwidget.inputCarveFile.setFilters(QgsMapLayerProxyModel.LineLayer)
            self.dockwidget.inputCarveFile.setCurrentIndex(-1)
            
            self.dockwidget.inputOutletsFile.setFilters(QgsMapLayerProxyModel.LineLayer)
            self.dockwidget.inputOutletsFile.setCurrentIndex(-1)
            
            self.dockwidget.outputDir.setDialogTitle('Select Directory')
            self.dockwidget.outputDir.fileChanged.connect(self.defineOutputPath)
            
            self.dockwidget.processAlgs.clicked.connect(self.processAlgs)
            
            self.dockwidget.toggleBreakup.setChecked(False)
            self.dockwidget.toggleBreakup.stateChanged.connect(self.toggleBreakup)
            
            self.dockwidget.gisSubdir.setText("model")
            self.dockwidget.toggleGisSubdir.setChecked(False)
            self.dockwidget.toggleGisSubdir.stateChanged.connect(self.toggleGisSubdir)
            
            # Populate the combo box with the list of items
            itemList = ["Mydro","URBS","RORB", "WBNM"]
            self.dockwidget.modelType.clear()
            self.dockwidget.modelType.addItems(itemList)
            
            self.dockwidget.RecrunchSub.setFilters(QgsMapLayerProxyModel.PolygonLayer)
            self.dockwidget.RecrunchSub.setCurrentIndex(-1)
            
            self.dockwidget.RecrunchStreams.setFilters(QgsMapLayerProxyModel.LineLayer)
            self.dockwidget.RecrunchStreams.setCurrentIndex(-1)
            
            self.dockwidget.RecrunchModelType.clear()
            self.dockwidget.RecrunchModelType.addItems(itemList)
            self.dockwidget.RecrunchModelType.currentTextChanged.connect(self.UpdateRecrunchRequirements)
            
            
            self.dockwidget.outputDir.setDialogTitle('Select Directory')
            
            self.dockwidget.runRecrunch.clicked.connect(self.runRecrunch)
